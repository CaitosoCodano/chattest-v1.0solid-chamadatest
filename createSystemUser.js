require('dotenv').config();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const User = require('./models/User');
const Message = require('./models/Message');

// Conectar ao MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/chat-app')
    .then(() => console.log('MongoDB Conectado'))
    .catch(err => console.error('Erro ao conectar ao MongoDB:', err));

const createSystemUser = async () => {
    try {
        // Verificar se o usuÃ¡rio Sistema jÃ¡ existe
        const existingUser = await User.findOne({ username: 'Sistema' });
        
        if (existingUser) {
            console.log('UsuÃ¡rio Sistema jÃ¡ existe:', existingUser._id);
            return existingUser;
        }
        
        // Criar senha aleatÃ³ria (nÃ£o serÃ¡ usada para login)
        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash('sistema123', salt);
        
        // Criar usuÃ¡rio Sistema
        const systemUser = new User({
            username: 'Sistema',
            password: hashedPassword,
            avatar: 'https://api.dicebear.com/7.x/bottts/svg?seed=Sistema',
            status: 'online'
        });
        
        await systemUser.save();
        console.log('UsuÃ¡rio Sistema criado com sucesso:', systemUser._id);
        
        // Criar mensagem de boas-vindas
        const welcomeMessage = new Message({
            sender: systemUser._id,
            receiver: systemUser._id, // Mensagem para si mesmo (serÃ¡ exibida para todos)
            content: 'ğŸ‘‹ Bem-vindo ao Chat App! Aqui vocÃª encontrarÃ¡ as novidades e atualizaÃ§Ãµes do sistema.',
            read: false,
            createdAt: new Date()
        });
        
        await welcomeMessage.save();
        
        // Criar mensagem com novidades
        const newsMessage = new Message({
            sender: systemUser._id,
            receiver: systemUser._id,
            content: 'ğŸš€ **Novidades da versÃ£o 1.0:**\n\n' +
                     '- âœ… Sistema de login e registro\n' +
                     '- âœ… Chat em tempo real\n' +
                     '- âœ… Status de usuÃ¡rio (online, ausente, offline)\n' +
                     '- âœ… Contador de mensagens nÃ£o lidas\n' +
                     '- âœ… PersistÃªncia de mensagens\n' +
                     '- âœ… NotificaÃ§Ãµes de novas mensagens',
            read: false,
            createdAt: new Date(Date.now() + 1000) // 1 segundo depois da mensagem de boas-vindas
        });
        
        await newsMessage.save();
        
        console.log('Mensagens do Sistema criadas com sucesso');
        
        return systemUser;
    } catch (error) {
        console.error('Erro ao criar usuÃ¡rio Sistema:', error);
    } finally {
        // Desconectar do MongoDB
        mongoose.disconnect();
    }
};

createSystemUser();
